<?xml version="1.0" encoding="UTF-8"?>
<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.omnifaces</groupId>
	<artifactId>omnifaces</artifactId>
	<version>4.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>OmniFaces</name>
	<description>Jakarta Faces 3.0+ utility library</description>
	<url>https://omnifaces.org</url>
	<organization>
		<name>OmniFaces</name>
		<url>https://omnifaces.org</url>
	</organization>
	<inceptionYear>2012</inceptionYear>

	<developers>
		<developer>
			<id>balusc</id>
			<name>Bauke Scholtz</name>
			<email>balusc@gmail.com</email>
		</developer>
		<developer>
			<id>arjan.tijms</id>
			<name>Arjan Tijms</name>
			<email>arjan.tijms@gmail.com</email>
		</developer>
	</developers>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<url>https://github.com/omnifaces/omnifaces</url>
		<connection>scm:git:git://github.com/omnifaces/omnifaces.git</connection>
		<developerConnection>scm:git:git@github.com:omnifaces/omnifaces.git</developerConnection>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<properties>

		<!-- Java versions. -->
		<javase.version>11</javase.version>
		<jakartaee.version>9</jakartaee.version>

		<!-- Essential Maven defaults. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>${javase.version}</maven.compiler.source>
		<maven.compiler.target>${javase.version}</maven.compiler.target>
		<maven.source.excludeResources>true</maven.source.excludeResources>

		<!-- Test server versions. -->
		<test.wildfly.version>22.0.0.Final</test.wildfly.version>
		<test.liberty.version>21.0.0.2-beta</test.liberty.version>
		<test.tomcat.version>10.0.0</test.tomcat.version>
		<test.weld.version>4.0.0.Final</test.weld.version>
		<test.hibernateValidator.version>7.0.0.Final</test.hibernateValidator.version>
		<test.jsonp.version>2.0.0</test.jsonp.version>
		<test.mojarra.version>3.0.0</test.mojarra.version>
		<test.myfaces.version>3.0.0-RC1</test.myfaces.version>
		<test.tomee.version>9.0.0-M3</test.tomee.version> <!-- TODO: JEE9 compatible version which supports jakarta.ee XML namespace (M3 unfortunately doesn't support it yet, it still throws jakarta.xml.bind.UnmarshalException: unexpected element (uri:"https://jakarta.ee/xml/ns/jakartaee", local:"web-fragment")) -->
		<test.payara.version>5.2020.4</test.payara.version> <!-- TODO: JEE9 compatible version -->
		<test.glassfish.version>6.0.0</test.glassfish.version> <!-- TODO: Java11 compatible version. -->
	</properties>

	<repositories>
		<repository>
			<id>jakarta-staging</id>
			<snapshots />
			<url>https://jakarta.oss.sonatype.org/content/repositories/staging</url> <!-- Currently only used for jersey-bom:pom:3.0.0-M4 which is required by GlassFish 6.0.0 -->
		</repository>
		<repository>
			<id>redhat-all</id>
			<snapshots />
			<url>https://maven.repository.redhat.com/techpreview/all</url> <!-- Currently only used for org.picketbox:picketbox:jar:5.0.3.Final-redhat-00006 which is required by WildFly 22.0.0.Beta1 -->
		</repository>
	</repositories>

	<dependencies>

		<!-- Required Jakarta EE 9 dependencies. -->
		<dependency>
			<groupId>jakarta.faces</groupId>
			<artifactId>jakarta.faces-api</artifactId>
			<version>3.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.el</groupId>
			<artifactId>jakarta.el-api</artifactId>
			<version>4.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>5.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.enterprise</groupId>
			<artifactId>jakarta.enterprise.cdi-api</artifactId>
			<version>3.0.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.websocket</groupId>
			<artifactId>jakarta.websocket-api</artifactId>
			<version>2.0.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Optional Jakarta EE 9 dependencies. -->
		<dependency>
			<groupId>jakarta.validation</groupId>
			<artifactId>jakarta.validation-api</artifactId>
			<version>3.0.0</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Test dependencies. -->
		<dependency>
			<groupId>jakarta.platform</groupId>
			<artifactId>jakarta.jakartaee-web-api</artifactId>
			<version>9.0.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.graphene</groupId>
			<artifactId>graphene-webdriver</artifactId>
			<version>2.1.0.Final</version> <!-- Newer versions appear to intermittently fail in RequestGuard and not be fully compatible with websockets -->
			<type>pom</type>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>

			<!-- Test dependencies. -->
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>1.6.0.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian.extension</groupId>
				<artifactId>arquillian-drone-bom</artifactId>
				<version>2.0.1.Final</version> <!-- Newer versions are incompatible with graphene-webdriver:2.1.0.Final -->
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.shrinkwrap.resolver</groupId>
				<artifactId>shrinkwrap-resolver-bom</artifactId>
				<version>3.1.4</version>
				<type>pom</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian.selenium</groupId>
				<artifactId>selenium-bom</artifactId>
				<version>3.13.0</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<resources>

			<!-- Exclude unminified JavaScript files (and Eclipse's jsfdia) from resources. -->
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>**/*.unminified.js</exclude>
					<exclude>**/*.jsfdia</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>

			<!-- Add missing license headers to source files. -->
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<header>license.txt</header>
					<excludes>
						<exclude>*.*</exclude>
					</excludes>
					<mapping>
						<java>SLASHSTAR_STYLE</java>
					</mapping>
				</configuration>
				<executions>
					<execution>
						<phase>process-sources</phase>
						<goals>
							<goal>format</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure the JavaScript minifier. -->
			<plugin>
				<groupId>com.samaxes.maven</groupId>
				<artifactId>minify-maven-plugin</artifactId>
				<version>1.7.6</version>
				<configuration>
					<webappSourceDir>${basedir}/src/main/resources</webappSourceDir>
					<webappTargetDir>${project.build.outputDirectory}</webappTargetDir>
					<jsSourceDir>META-INF/resources/omnifaces</jsSourceDir>
					<nosuffix>true</nosuffix>
					<jsEngine>CLOSURE</jsEngine>
				</configuration>
				<executions>
					<execution>
						<id>minify-omnifaces</id>
						<configuration>
							<jsSourceFiles>
								<jsSourceFile>omnifaces.unminified.js</jsSourceFile>
								<jsSourceFile>util.unminified.js</jsSourceFile>
								<jsSourceFile>highlight.unminified.js</jsSourceFile>
								<jsSourceFile>deferredscript.unminified.js</jsSourceFile>
								<jsSourceFile>unload.unminified.js</jsSourceFile>
								<jsSourceFile>push.unminified.js</jsSourceFile>
								<jsSourceFile>inputfile.unminified.js</jsSourceFile>
								<jsSourceFile>form.unminified.js</jsSourceFile>
								<jsSourceFile>hashparam.unminified.js</jsSourceFile>
								<jsSourceFile>scriptparam.unminified.js</jsSourceFile>
								<jsSourceFile>sw-register.unminified.js</jsSourceFile>
								<jsSourceFile>graphicimage.unminified.js</jsSourceFile>
							</jsSourceFiles>
							<jsFinalFile>omnifaces.js</jsFinalFile>
						</configuration>
						<goals>
							<goal>minify</goal>
						</goals>
					</execution>
					<execution>
						<id>minify-sw</id>
						<configuration>
							<jsSourceFiles>
								<jsSourceFile>sw.unminified.js</jsSourceFile>
							</jsSourceFiles>
							<jsFinalFile>sw.js</jsFinalFile>
						</configuration>
						<goals>
							<goal>minify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure the jar with the binaries. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<URL>${project.url}</URL>
							<Extension-Name>${project.artifactId}</Extension-Name>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<!-- Configure the jar with the sources. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure the jar with the javadoc. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
					<javadocVersion>${javase.version}</javadocVersion>
					<notimestamp>true</notimestamp>
					<splitindex>true</splitindex>
					<doclint>all,-missing</doclint>
					<doctitle>OmniFaces API documentation</doctitle>
					<links>
						<link>https://jakarta.ee/specifications/platform/${jakartaee.version}/apidocs/</link>
					</links>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Configure snapshot deployment to Sonatype. -->
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.6.8</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh</serverId>
					<nexusUrl>https://oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
				</configuration>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>

				<!-- Make sure Eclipse itself also runs license format and JavaScript minifier during build. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.mycila</groupId>
										<artifactId>license-maven-plugin</artifactId>
										<versionRange>[3.0,)</versionRange>
										<goals>
											<goal>format</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.samaxes.maven</groupId>
										<artifactId>minify-maven-plugin</artifactId>
										<versionRange>[1.7.6,)</versionRange>
										<goals>
											<goal>minify</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

				<!-- Global configuration for integration test profiles. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.2</version>
					<executions>
						<execution>
							<phase>process-test-classes</phase>
							<goals>
								<goal>unpack</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<outputDirectory>${project.build.directory}</outputDirectory>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.22.2</version>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<systemPropertyVariables>
							<profile.id>${project.activeProfiles[0].id}</profile.id>
							<omnifaces.jar>${project.build.directory}/${project.build.finalName}.jar</omnifaces.jar>
						</systemPropertyVariables>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<!-- NOTE: If Eclipse+M2E shows "Plugin execution not covered by lifecycle configuration" error in one of -->
		<!-- below sections, then you need to add a default lifecycle mapping as instructed in M2E documentation: -->
		<!-- https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html#common-problems -->

		<!-- WildFly integration test profile: mvn verify -P wildfly -->
		<profile>
			<id>wildfly</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<version>3.0.1.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.wildfly</groupId>
											<artifactId>wildfly-preview-dist</artifactId>
											<version>${test.wildfly.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<jboss.home>${project.build.directory}/wildfly-preview-${test.wildfly.version}</jboss.home>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- OpenLiberty integration test profile: mvn verify -P liberty -->
		<profile>
			<id>liberty</id>
			<dependencies>
				<dependency>
					<groupId>io.openliberty.arquillian</groupId>
					<artifactId>arquillian-liberty-managed-jakarta</artifactId>
					<version>2.0.0-M1</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>io.openliberty.beta</groupId>
											<artifactId>openliberty-jakartaee9</artifactId>
											<version>${test.liberty.version}</version>
											<type>zip</type>
										</artifactItem>
										<artifactItem>
											<groupId>io.openliberty.arquillian</groupId>
											<artifactId>arquillian-liberty-support-jakarta</artifactId>
											<version>2.0.0-M1</version>
											<type>zip</type>
											<classifier>feature</classifier>
											<outputDirectory>${project.build.directory}/wlp/usr</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.2.0</version>
						<executions>
							<execution>
								<id>update-liberty-server</id> <!-- Liberty apparently requires a bit more specific server.xml in order for its own Arquillian plugin to be able to manage it. -->
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/wlp/usr/servers/defaultServer</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/src/test/resources/arquillian/liberty</directory>
											<includes>
												<include>server.xml</include>
											</includes>
										</resource>
									</resources>
									<overwrite>true</overwrite>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<arquillian.launch>liberty</arquillian.launch>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Tomcat-Mojarra integration test profile: mvn verify -P tomcat-mojarra -->
		<profile>
			<id>tomcat-mojarra</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-tomcat-managed-8</artifactId>
					<version>1.2.0.Alpha1</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.apache.tomcat</groupId>
											<artifactId>tomcat</artifactId>
											<version>${test.tomcat.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.2.0</version>
						<executions>
							<execution>
								<id>update-tomcat-users</id> <!-- Else Tomcat unexpectedly spits error that Arquillian isn't allowed to manage Tomcat. Most probably org.jboss.arquillian.container:arquillian-tomcat-managed-8 should be updated to support Tomcat 10 but this isn't available (yet). -->
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/apache-tomcat-${test.tomcat.version}/conf</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/src/test/resources/arquillian/tomcat</directory>
											<includes>
												<include>tomcat-users.xml</include>
											</includes>
										</resource>
									</resources>
									<overwrite>true</overwrite>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemProperties>
								<arquillian.launch>tomcat</arquillian.launch>
								<war.libraries>
									org.glassfish:jakarta.faces:${test.mojarra.version},
									org.jboss.weld.servlet:weld-servlet-shaded:${test.weld.version},
									org.hibernate.validator:hibernate-validator:${test.hibernateValidator.version},
									org.glassfish:jakarta.json:${test.jsonp.version}
								</war.libraries>
							</systemProperties>
							<environmentVariables>
								<CATALINA_HOME>${project.build.directory}/apache-tomcat-${test.tomcat.version}</CATALINA_HOME>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Tomcat-MyFaces integration test profile: mvn verify -P tomcat-myfaces -->
		<profile>
			<id>tomcat-myfaces</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-tomcat-managed-8</artifactId>
					<version>1.2.0.Alpha1</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.apache.tomcat</groupId>
											<artifactId>tomcat</artifactId>
											<version>${test.tomcat.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.2.0</version>
						<executions>
							<execution>
								<id>update-tomcat-users</id> <!-- Else Tomcat unexpectedly spits error that Arquillian isn't allowed to manage Tomcat. Most probably org.jboss.arquillian.container:arquillian-tomcat-managed-8 should be updated to support Tomcat 10 but this isn't available (yet). -->
								<phase>pre-integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/apache-tomcat-${test.tomcat.version}/conf</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/src/test/resources/arquillian/tomcat</directory>
											<includes>
												<include>tomcat-users.xml</include>
											</includes>
										</resource>
									</resources>
									<overwrite>true</overwrite>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemProperties>
								<arquillian.launch>tomcat</arquillian.launch>
								<war.libraries>
									org.apache.myfaces.core:myfaces-api:${test.myfaces.version},
									org.apache.myfaces.core:myfaces-impl:${test.myfaces.version},
									org.jboss.weld.servlet:weld-servlet-shaded:${test.weld.version},
									org.hibernate.validator:hibernate-validator:${test.hibernateValidator.version},
									org.glassfish:jakarta.json:${test.jsonp.version}
								</war.libraries>
							</systemProperties>
							<environmentVariables>
								<CATALINA_HOME>${project.build.directory}/apache-tomcat-${test.tomcat.version}</CATALINA_HOME>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- TomEE integration test profile: mvn verify -P tomee -->
		<profile>
			<id>tomee</id>
			<dependencies>
				<dependency>
					<groupId>org.apache.tomee</groupId>
					<artifactId>arquillian-tomee-remote</artifactId>
					<version>8.0.5</version> <!-- TODO: TomEE 9 compatible version. The 8.0.3 seems to work fine with TomEE 9 wrt deploy but not wrt cleanup. -->
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.apache.tomee.jakarta</groupId>
											<artifactId>apache-tomee</artifactId>
											<version>${test.tomee.version}</version>
											<type>zip</type>
											<classifier>webprofile</classifier>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<tomee.dir>${project.build.directory}/apache-tomee-webprofile-${test.tomee.version}</tomee.dir>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Payara integration test profile: mvn verify -P payara -->
		<profile>
			<id>payara</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-glassfish-managed-3.1</artifactId>
					<version>1.0.2</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>fish.payara.distributions</groupId>
											<artifactId>payara-web</artifactId>
											<version>${test.payara.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<environmentVariables>
								<GLASSFISH_HOME>${project.build.directory}/payara5</GLASSFISH_HOME>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- GlassFish integration test profile: mvn verify -P glassfish -->
		<profile>
			<id>glassfish</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-glassfish-managed-6</artifactId>
					<version>1.0.0.Alpha1</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.glassfish.main.distributions</groupId>
											<artifactId>glassfish</artifactId>
											<version>${test.glassfish.version}</version>
											<type>zip</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<environmentVariables>
								<GLASSFISH_HOME>${project.build.directory}/glassfish6</GLASSFISH_HOME>
							</environmentVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Release deploy: mvn clean deploy -P release -->
		<profile>
			<id>release</id>
			<build>
				<plugins>

					<!-- Signing with GPG is a requirement for a release deployment to Maven central. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>